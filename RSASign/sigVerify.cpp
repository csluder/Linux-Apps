/*
Copyright (C) 2014 Charles E Sluder
Example application to verify a signature using either a certificate
or an embedded public key

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#include "RSASign.hpp"
#include <unistd.h>
#include <cstdio>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

uint32_t ReadBinaryFile( const char* filename, 
                         unsigned char** output_buffer);

void PrintData( char* string, void* dataInput, uint32_t num_bytes );

static unsigned char publicKeyExponent[4] = {0x00,0x01,0x00,0x01};
static unsigned char publicKeyModulus[512] =
{
  0xc8, 0x55, 0x0c, 0x82, 0xed, 0xab, 0x11, 0x9e, 0x6c, 0xdc, 0xf5, 0x04, 0x45, 0xe8, 0x73, 0xc9,
  0xef, 0xa5, 0xa4, 0x70, 0x7d, 0xc5, 0x96, 0x16, 0xae, 0x51, 0x7c, 0x90, 0x64, 0x92, 0xcc, 0x32,
  0x1e, 0x97, 0x94, 0xd3, 0x1f, 0x72, 0x93, 0x24, 0xc9, 0x34, 0x41, 0x09, 0x4b, 0xb3, 0x26, 0x1a,
  0x9b, 0x60, 0xe3, 0x40, 0x4e, 0x51, 0x0e, 0x88, 0x62, 0x92, 0xba, 0xb2, 0xd4, 0x7f, 0x13, 0xa2,
  0x05, 0x3f, 0x25, 0xba, 0x60, 0xc1, 0x9d, 0xec, 0xa8, 0x61, 0x2e, 0xf6, 0x4b, 0xad, 0x94, 0x99,
  0x75, 0xc2, 0xb7, 0x58, 0xce, 0xbf, 0x41, 0xbe, 0x0e, 0x6a, 0xff, 0xfa, 0xdc, 0x50, 0xa5, 0x60,
  0xc0, 0xa4, 0xa1, 0xac, 0x08, 0x6c, 0x5f, 0x34, 0x18, 0xee, 0x99, 0x5f, 0xd0, 0xe5, 0xc6, 0x17,
  0x2c, 0xe1, 0xae, 0xd9, 0x3a, 0x09, 0xd3, 0xe0, 0xaf, 0x2d, 0x70, 0x26, 0xb0, 0x20, 0xc3, 0x2d,
  0x25, 0x53, 0x61, 0x21, 0x38, 0x52, 0xca, 0xa6, 0xd3, 0x2a, 0x21, 0xb4, 0xba, 0x0e, 0x49, 0xfe,
  0x99, 0x8e, 0x12, 0x5b, 0xe5, 0x8c, 0xce, 0x9a, 0x26, 0xbf, 0x88, 0x7a, 0x50, 0x59, 0x02, 0xe5,
  0xb9, 0xd6, 0xc3, 0x65, 0x34, 0x19, 0xc1, 0x0f, 0xf0, 0xee, 0xaf, 0x0e, 0xd3, 0x3e, 0xe3, 0x33,
  0x8f, 0x3c, 0xb8, 0x78, 0xbd, 0xdf, 0xab, 0x9e, 0x10, 0xac, 0x07, 0x3a, 0xe6, 0x62, 0x87, 0xf4,
  0xdd, 0x1e, 0x6f, 0x93, 0x56, 0xe8, 0x44, 0x3b, 0x7d, 0x8b, 0x2c, 0x44, 0x6a, 0x17, 0x08, 0x21,
  0xf8, 0x41, 0xa4, 0x9f, 0x98, 0x06, 0x8a, 0x67, 0x08, 0x5d, 0x9e, 0xb2, 0xf5, 0xb2, 0x4c, 0xd7,
  0x90, 0xad, 0x4d, 0x95, 0xb6, 0x4f, 0x3c, 0x3b, 0x8b, 0xd0, 0x5c, 0xe9, 0x0d, 0xc1, 0xae, 0xa6,
  0x21, 0x05, 0xed, 0x6a, 0xca, 0x73, 0x11, 0x78, 0xd7, 0x21, 0xec, 0x7a, 0xd4, 0x59, 0x03, 0x35,
  0x3e, 0x81, 0xe0, 0x94, 0xa5, 0x56, 0x42, 0x1d, 0xb1, 0xe7, 0x28, 0xfb, 0x5a, 0x73, 0x7e, 0x95,
  0x75, 0x99, 0xf5, 0xc3, 0x93, 0x9d, 0x92, 0xfc, 0x61, 0x8b, 0x89, 0x34, 0x09, 0x64, 0x90, 0x81,
  0x71, 0x4c, 0x8d, 0x2b, 0x50, 0x5c, 0xee, 0x45, 0xa0, 0x76, 0xd2, 0xba, 0xcc, 0x1c, 0x85, 0xee,
  0x7c, 0x5f, 0xf5, 0x0e, 0x81, 0x8c, 0xca, 0x46, 0x94, 0xef, 0x82, 0xe2, 0xff, 0x04, 0xc9, 0xa8,
  0x3a, 0xa6, 0xed, 0xe0, 0x57, 0x92, 0x85, 0xfb, 0xcf, 0x9f, 0x9b, 0xf1, 0x65, 0xe6, 0x6f, 0x91,
  0x3d, 0xe5, 0xfe, 0xc7, 0x5b, 0x39, 0x02, 0xf5, 0xe6, 0x6c, 0xc0, 0x52, 0x95, 0x6c, 0xaf, 0x0b,
  0x29, 0xdb, 0x6e, 0x22, 0x91, 0x1c, 0x93, 0x76, 0xdd, 0xe4, 0xbf, 0x74, 0x14, 0x65, 0x67, 0x02,
  0x65, 0x87, 0x1b, 0x8d, 0x10, 0x09, 0x24, 0xd6, 0xdd, 0x70, 0x04, 0xcc, 0xb1, 0xff, 0x4d, 0x4c,
  0x59, 0x35, 0x3b, 0x7c, 0x13, 0x0b, 0x4f, 0x99, 0x87, 0x83, 0x13, 0xbc, 0xfa, 0x7c, 0xe5, 0x22,
  0x7a, 0x61, 0x04, 0x4e, 0x52, 0x7a, 0xbb, 0x8a, 0x3b, 0xd2, 0x2b, 0x1a, 0xa3, 0x36, 0x9c, 0xfa,
  0xe1, 0x60, 0xde, 0x94, 0x26, 0xbf, 0x58, 0xf3, 0x89, 0xd7, 0x1b, 0x8c, 0xe9, 0xee, 0x39, 0x6d,
  0xe0, 0x3c, 0xb0, 0xb2, 0x23, 0x36, 0x82, 0x24, 0x82, 0x1c, 0xbf, 0x80, 0x85, 0x26, 0x0b, 0x35,
  0xd5, 0xeb, 0xb9, 0x54, 0xbe, 0x4f, 0xd1, 0xf5, 0x6b, 0x76, 0x62, 0x10, 0xc6, 0x3c, 0x69, 0x2a,
  0x54, 0xc5, 0x55, 0x67, 0x14, 0x72, 0x01, 0x3d, 0x9b, 0xf0, 0x4b, 0x5f, 0x76, 0xe1, 0x46, 0x53,
  0x2f, 0x33, 0xd8, 0x3a, 0x40, 0x58, 0xf0, 0xaa, 0xde, 0x1e, 0x06, 0x95, 0xfc, 0x81, 0x72, 0xa2,
  0x3e, 0x81, 0xe2, 0x32, 0x65, 0xbf, 0x43, 0x3f, 0xaa, 0x55, 0x4c, 0xf2, 0xe4, 0x4a, 0xc6, 0x53
};

int
main(int argc, char *argv[])
{
  char* inputFilename = NULL;
  char* sigFilename = NULL;
  char* certFileName = NULL;
  int inputSizeBytes = 0;
  unsigned char* inputData = NULL;

  argc--;
  argv++;

  if ( argc >= 2 )
  {
    inputFilename = *(argv);
    sigFilename = *(++argv);
    if ( argc == 3 )
    { 
      certFileName = *(++argv);
    }
  } else {
    printf("Usage: appSigningTool Application_file_path  signing_file_path [x509 certificate path]\n");
    exit(0);
  }

  inputSizeBytes = ReadBinaryFile(inputFilename, &inputData);
  if ( inputSizeBytes <= 0 ) {
    printf("Error encountered reading input file\n");
    exit(-1);
  }

  unsigned char* bodyData = inputData;

  int sigFile;
  if ( (sigFilename != NULL) &&  ((sigFile = open(sigFilename, O_RDONLY)) > 0) )
  {


    RSASign sigClass( RSASign::HASH_SHA256 );
    
    if ( certFileName != NULL )
    {
      sigClass.LoadX509( certFileName );
    }
    else
    {
      sigClass.GenerateKey( publicKeyExponent, 
                            sizeof(publicKeyExponent),
                            publicKeyModulus,
                            sizeof(publicKeyModulus) );
    }
    

    int sigSize = sigClass.GetSignatureSize();
    unsigned char Signature[ sigSize ];
    read( sigFile, Signature, sigSize );

#ifdef MD5SUM
    /**
     * MD5 hash wants a multiple of 64 bytes. SHA hashes pad data out to 64 bytes
     */
    inputSizeBytes = inputSizeBytes & 0xffffffc0;
#endif

    int result = sigClass.VerifySignature( (uint32_t*)bodyData, inputSizeBytes, Signature );
    if ( result <= 0 )
    {
      printf("Problem Verifying Signature\n");
      exit(-1);
    }
    printf("Signature verification completed\n");

  }
  else
  {
    printf("Problem opening signature file\n");
    exit(-1);
  }

  close(sigFile);


  exit( 0 );
}


uint32_t ReadBinaryFile(const char* filename, unsigned char** output_buffer)
{
  int fileSize = 0x0;
  FILE* inputFile  = fopen(filename, "rb");
  if (inputFile != NULL)
  {
    fseek(inputFile, 0, SEEK_END);
    fileSize = ftell(inputFile);
    fseek(inputFile, 0, SEEK_SET);

    printf("Binary filesize = %d bytes\n", fileSize);
    if (fileSize > 0)
    {
      *output_buffer = new unsigned char[fileSize];
      fread(*output_buffer, fileSize, sizeof(unsigned char), inputFile);
    }
    fclose(inputFile);
  }

  return fileSize;
}

void PrintData(char* string, void* dataInput, uint32_t num_bytes)
{
  uint32_t i;
  unsigned char* data_ptr = (unsigned char*)dataInput;
  printf("%s: ", string);
  for (i=0; i<num_bytes; i++)
  {
    printf("%02lx", (unsigned long)data_ptr[i]);
  }
  printf("\n\n");
}





